%matplotlib inline
import matplotlib.pyplot as plt
import cmath
import math
import numpy as np
from numpy import linalg as LA
from matplotlib.animation import FuncAnimation as FA
from matplotlib import rc
from IPython.display import HTML
from scipy.integrate import simps
import matplotlib.patches as ptch
import warnings
from scipy.optimize import fsolve

#==INPUT BASED ON MODEL==
dx = float(0.02); dt = float(0.0002) #time and space steps
barA = int((1./3.)/dx); barB = int((2./3.)/dx) #location of barrier
nu = 200. #potential barrier strength
INITIALSTATE=2 #0 - 1st analytic state
               #1 - spike (not implement)
               #2 - superposition
L = 1.; grid = int(L/dx)+1; x = np.arange(0,1+dx,dx); T=1.
#==============

##########################################################
def Op(): #Creates Hamiltonian Operator
    D = ((np.diagflat(2*np.ones(grid))
        + np.diagflat(-np.ones(grid-1),-1)
        + np.diagflat(-np.ones(grid-1),1)))
    D[0,:] = 0; D[:,0] = 0; D[grid-1,:] = 0; D[:,grid-1] = 0; D = (D/(dx**2))
    if nu!=0: #Add potential barrier
        for i in range(barA, barB):
            D[i][i] = D[i][i]+nu
    return D

def EIG(): #Calculates and prepares eigenstates and eigenvalues
    v,w = LA.eigh(D); w = w.transpose(); idx = v.argsort()[::1]; v = v[idx]; w = w[:, idx] #Sort energies low to high
    w = w/np.sqrt(dx)
    for i in range(grid): #Flips eigenstates, since eigh doesn't care about direction
        if w[i,2]<=0:
            w[i,:] = -w[i,:]
    wdel = [] #Remove unphysical states
    for i in range(grid):
        if np.count_nonzero(w[i,:])<2:
            wdel=np.append(wdel,i)
    w = np.delete(w,wdel,0); v = np.delete(v,wdel,0)
    return v,w

def crankNicolson():
    Psi = np.zeros([gridt,grid], dtype=np.complex128); Psi[0,:] = init/np.sqrt(2)
    PsiProb = np.zeros([gridt,grid],dtype=np.complex128); PsiProb[0,:] = np.abs(np.conj(init)*init)/math.sqrt(2)/2
    for i in range(1,gridt):
        U1 = np.diagflat(np.ones(grid)) - (1j*dt*i/2)*D; U2 = LA.inv(np.diagflat(np.ones(grid))+(1j*dt*i/2)*D)
        P = U1.dot(Psi[i-1,:]);
        Psi[i,:] = U2.dot(P); PsiProb[i,:] = np.conj(Psi[i,:])*Psi[i,:]/math.sqrt(2)
    return Psi, PsiProb
    
def initialize_states():
    init = np.zeros(grid)
    if INITIALSTATE==0: #Uses the first analytic solution as initial condition
        for i in range(grid):
            init[i] = math.sqrt(2)*math.sin(math.pi*dx*i)
        gridt = int(T/dt)+1
    elif INITIALSTATE==1: #Uses a spike as initial condition
        init[int((grid-1/2))]=1
    elif INITIALSTATE==2: #Uses superposition of first and second states as initial condition
        init = (w[0][:]+w[1][:])/math.sqrt(2)
        v0 = 2*abs(v[0] - v[1])**2; T = math.pi/v0; gridt = int(T/dt)
    return init,gridt

###########################################################
##======================MAIN PROGRAM=====================##
###########################################################
D = Op() #Creates Hamiltonian Operator
v,w = EIG() #Returns numerical eigenvectors and eigenvalues
init,gridt = initialize_states() #Create the initial state
CFL = dt/(dx**2)
if CFL>0.5:
    raise Exception('Current parameters violate the CLF condition!'
                    '\n'
                    'Lower the time intervals or increase spatial intervals. CFL ={:>8.2f}'.format(CFL))
Psi, PsiProb = crankNicolson()
###########################################################
###########################################################

#---------------------------------------------------------------------------------------------------

###########################################################
##===================PLOTTING RESULTS====================##
###########################################################

#LaTeX plotting settings
width = 4.6
height = width/1.618
saveImg = 0 #set to 1 to save images
sep = ''
#------------------------------------
#==As of 27-4-2019, animations only work for nu>200 and eigenstates 0 and 1==
#==SET THE NEXT LINE TO 1 IF ANIMATING TIME EVOLUTION. SET TO 1 TO SAVE==
animating=1; saveanim = 0
if animating==1:
    if nu>200:
        (warnings.warn('Animations are unstable when nu>200.' '\n'
                   'Tunneling may not occur. The value of nu is {}'.format(nu))) 
    def drawBar():
        ls = barA*dx; rect = ptch.Rectangle((ls,0),ls+dx,nu**2, edgecolor='none', alpha = 0.3)
        return rect
    fg, ax = plt.subplots(figsize=(10,10)); ax.set(xlim=(0,1),ylim=(-1,1.5))
    line = ax.plot(x,np.real(PsiProb[0,:]),color='k',lw=2)[0]
    def animate(i): #updates lines
        line.set_ydata(np.real(PsiProb[i,:]))
    rect = drawBar(); ax.add_patch(rect); anim = FA(fg,animate,interval=200,frames=gridt, repeat=True)
    rc('animation', html='html5')
    if saveanim==1:
        anim; anim.save('tunnel.gif', writer='imagemagick', fps=60)

#==SET THE NEXT LINE TO 1 IF PLOTTING NUMERICAL VS ANALYTIC EIGENSTATES; SET TO 1 TO SAVE==
Imgs1 = 0; saveImgs1=0
if nu==0:
    if Imgs1==1:
        fig = plt.figure(); fig.set_size_inches(width, height)
        for i in range(3):
            l1 = "$E_{}$={:>8.2f}".format(i,v[i+1]); plt.plot(x,w[i,:], label=l1)
        plt.legend(); plt.title('Numerical Eigenstates'); plt.tight_layout()

        fig2 = plt.figure(); fig2.set_size_inches(width, height)
        for i in range(3):
            l1 = "$E_{}$={:>8.2f}".format(i,V[i+1]); plt.plot(x,W[i+1,:], label=l1)
        plt.legend(); plt.title('Analytic (Exact) Eigenstates'); plt.tight_layout()

        fig3 = plt.figure(); fig3.set_size_inches(width, height)
        plt.plot(v*np.sqrt(2), label ='Numerical Energies'); plt.plot(V, label ='Analytic (Exact) Energies')
        plt.title('Numerical vs. Analytic Energies'); plt.xlabel('n'); plt.ylabel('Energy (dimensionless)')
        plt.xlim(0,grid-1); plt.tight_layout(); plt.legend()
        if saveImgs1==1:
            fig.savefig('compstates1.pdf'); fig2.savefig('compstates2.pdf'); fig3.savefig('compare.pdf')
            
else:
    if Imgs1==1:
        fig = plt.figure()
        fig.set_size_inches(width*1.6, height*1.6)
        for i in range(5):
            l1 = "$E_{}$={:>8.2f}".format(i,v[i]);
            plt.plot(x,w[i,:], label=l1)
        plt.legend(); (plt.title('Numerical Eigenstates for Potential Well' '\n'
                  'with Potential Strength ' r'$\nu_o=1000$'))
        plt.tight_layout()
        if saveImgs1==1:
            fig.savefig('barStates.pdf')
